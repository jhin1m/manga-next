generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Authors {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  slug          String          @unique @db.VarChar(255)
  bio           String?
  avatar_url    String?         @db.VarChar(255)
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?       @default(now()) @db.Timestamptz(6)
  Comic_Authors Comic_Authors[]
}

model Chapter_Views {
  id         BigInt    @id @default(autoincrement())
  chapter_id Int
  user_id    Int?
  ip_address String?   @db.VarChar(45)
  user_agent String?
  viewed_at  DateTime? @default(now()) @db.Timestamptz(6)
  Chapters   Chapters  @relation(fields: [chapter_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Users      Users?    @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([chapter_id, viewed_at(sort: Desc)], map: "idx_chapter_views_chapter_id_viewed_at")
}

model Chapters {
  id               Int                @id @default(autoincrement())
  comic_id         Int
  chapter_number   Float
  title            String?            @db.VarChar(255)
  slug             String             @db.VarChar(255)
  release_date     DateTime?          @default(now()) @db.Timestamptz(6)
  view_count       Int?               @default(0)
  uploader_id      Int?
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?          @default(now()) @db.Timestamptz(6)
  Chapter_Views    Chapter_Views[]
  Comics           Comics             @relation(fields: [comic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Users            Users?             @relation(fields: [uploader_id], references: [id], onUpdate: NoAction)
  Comments         Comments[]
  Pages            Pages[]
  Reading_Progress Reading_Progress[]

  @@unique([comic_id, chapter_number])
  @@unique([comic_id, slug])
  @@index([comic_id, release_date(sort: Desc)], map: "idx_chapters_comic_id_release_date")
}

model Comic_Authors {
  comic_id   Int
  author_id  Int
  role       String    @db.VarChar(100)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  Authors    Authors   @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Comics     Comics    @relation(fields: [comic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([comic_id, author_id, role])
}

model Comic_Genres {
  comic_id   Int
  genre_id   Int
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  Comics     Comics    @relation(fields: [comic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Genres     Genres    @relation(fields: [genre_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([comic_id, genre_id])
}

model Comic_Publishers {
  comic_id     Int
  publisher_id Int
  created_at   DateTime?  @default(now()) @db.Timestamptz(6)
  Comics       Comics     @relation(fields: [comic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Publishers   Publishers @relation(fields: [publisher_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([comic_id, publisher_id])
}

model Comic_Views {
  id         BigInt    @id @default(autoincrement())
  comic_id   Int
  user_id    Int?
  ip_address String?   @db.VarChar(45)
  user_agent String?
  viewed_at  DateTime? @default(now()) @db.Timestamptz(6)
  Comics     Comics    @relation(fields: [comic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Users      Users?    @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([comic_id, viewed_at(sort: Desc)], map: "idx_comic_views_comic_id_viewed_at")
}

model Comics {
  id                       Int                @id @default(autoincrement())
  title                    String             @db.VarChar(255)
  slug                     String             @unique @db.VarChar(255)
  alternative_titles       Json?
  description              String?
  cover_image_url          String?            @db.VarChar(255)
  status                   String             @default("ongoing") @db.VarChar(50)
  release_date             DateTime?          @db.Date
  country_of_origin        String?            @db.VarChar(100)
  age_rating               String?            @db.VarChar(50)
  total_views              Int?               @default(0)
  total_favorites          Int?               @default(0)
  last_chapter_uploaded_at DateTime?          @db.Timestamptz(6)
  uploader_id              Int?
  created_at               DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?          @default(now()) @db.Timestamptz(6)
  Chapters                 Chapters[]
  Comic_Authors            Comic_Authors[]
  Comic_Genres             Comic_Genres[]
  Comic_Publishers         Comic_Publishers[]
  Comic_Views              Comic_Views[]
  Users                    Users?             @relation(fields: [uploader_id], references: [id], onUpdate: NoAction)
  Comments                 Comments[]
  Favorites                Favorites[]
  Reading_Progress         Reading_Progress[]

  @@index([last_chapter_uploaded_at(sort: Desc)], map: "idx_comics_last_chapter_uploaded_at")
  @@index([status], map: "idx_comics_status")
  @@index([title], map: "idx_comics_title")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Comments {
  id                Int        @id @default(autoincrement())
  user_id           Int
  comic_id          Int?
  chapter_id        Int?
  parent_comment_id Int?
  content           String
  created_at        DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?  @default(now()) @db.Timestamptz(6)
  Chapters          Chapters?  @relation(fields: [chapter_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Comics            Comics?    @relation(fields: [comic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Comments          Comments?  @relation("CommentsToComments", fields: [parent_comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_Comments    Comments[] @relation("CommentsToComments")
  Users             Users      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([chapter_id, created_at(sort: Desc)], map: "idx_comments_chapter_id_created_at")
  @@index([comic_id, created_at(sort: Desc)], map: "idx_comments_comic_id_created_at")
  @@index([user_id], map: "idx_comments_user_id")
}

model Favorites {
  user_id    Int
  comic_id   Int
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  Comics     Comics    @relation(fields: [comic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Users      Users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, comic_id])
}

model Genres {
  id           Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar(255)
  slug         String         @unique @db.VarChar(255)
  description  String?
  created_at   DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?      @default(now()) @db.Timestamptz(6)
  Comic_Genres Comic_Genres[]
}

model Pages {
  id             Int       @id @default(autoincrement())
  chapter_id     Int
  page_number    Int
  image_url      String    @db.VarChar(255)
  image_alt_text String?   @db.VarChar(255)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  Chapters       Chapters  @relation(fields: [chapter_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([chapter_id, page_number])
  @@index([chapter_id, page_number], map: "idx_pages_chapter_id_page_number")
}

model Publishers {
  id               Int                @id @default(autoincrement())
  name             String             @unique @db.VarChar(255)
  slug             String             @unique @db.VarChar(255)
  description      String?
  logo_url         String?            @db.VarChar(255)
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?          @default(now()) @db.Timestamptz(6)
  Comic_Publishers Comic_Publishers[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Reading_Progress {
  user_id               Int
  comic_id              Int
  last_read_chapter_id  Int?
  last_read_page_number Int?
  progress_percentage   Float?    @db.Real
  updated_at            DateTime? @default(now()) @db.Timestamptz(6)
  Comics                Comics    @relation(fields: [comic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Chapters              Chapters? @relation(fields: [last_read_chapter_id], references: [id], onUpdate: NoAction)
  Users                 Users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, comic_id])
}

model Users {
  id               Int                @id @default(autoincrement())
  username         String             @unique @db.VarChar(255)
  email            String             @unique @db.VarChar(255)
  password_hash    String             @db.VarChar(255)
  avatar_url       String?            @db.VarChar(255)
  role             String             @default("user") @db.VarChar(50)
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?          @default(now()) @db.Timestamptz(6)
  Chapter_Views    Chapter_Views[]
  Chapters         Chapters[]
  Comic_Views      Comic_Views[]
  Comics           Comics[]
  Comments         Comments[]
  Favorites        Favorites[]
  Reading_Progress Reading_Progress[]
}
