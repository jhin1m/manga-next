#!/usr/bin/env ts-node
/**
 * CLI tool ƒë·ªÉ ch·∫°y manga crawler v·ªõi ch·ª©c nƒÉng sync
 *
 * C√°ch s·ª≠ d·ª•ng:
 * npx ts-node scripts/crawl.ts [source] [startPage] [endPage] [options]
 *
 * V√≠ d·ª•:
 * npx ts-node scripts/crawl.ts mangaraw 1 5 --use-original-images
 * npx ts-node scripts/crawl.ts mangaraw --manga-id=20463a51-7faf-4a3f-9e67-5c624f80d487
 * npx ts-node scripts/crawl.ts mangaraw --sync --manga-id=20463a51-7faf-4a3f-9e67-5c624f80d487
 */

// S·ª≠ d·ª•ng require thay v√¨ import ƒë·ªÉ tr√°nh l·ªói ES modules
const crawler = require('../src/lib/crawler/index');
const dotenv = require('dotenv');
const { PrismaClient } = require('@prisma/client');

// Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
dotenv.config();

// Kh·ªüi t·∫°o Prisma client
const prisma = new PrismaClient();

// Parse arguments
function parseArgs() {
  const args = process.argv.slice(2);
  const options: {
    source: string;
    startPage: number;
    endPage?: number;
    help: boolean;
    useOriginalImages?: boolean;
    mangaId?: string;
    concurrency?: number;
    authToken?: string;
    sync?: boolean;
  } = {
    source: 'mangaraw',
    startPage: 1,
    help: false,
  };

  // Hi·ªÉn th·ªã help n·∫øu kh√¥ng c√≥ tham s·ªë ho·∫∑c c√≥ flag --help
  if (args.length === 0 || args.includes('--help') || args.includes('-h')) {
    options.help = true;
    return options;
  }

  // Parse c√°c tham s·ªë v·ªã tr√≠
  if (args[0] && !args[0].startsWith('-')) {
    options.source = args[0];
  }

  if (args[1] && !args[1].startsWith('-')) {
    options.startPage = parseInt(args[1], 10);
  }

  if (args[2] && !args[2].startsWith('-')) {
    options.endPage = parseInt(args[2], 10);
  }

  // Parse c√°c tham s·ªë flag
  for (const arg of args) {
    if (arg === '--use-original-images') {
      options.useOriginalImages = true;
    } else if (arg === '--sync') {
      options.sync = true;
    } else if (arg.startsWith('--manga-id=')) {
      options.mangaId = arg.split('=')[1];
    } else if (arg.startsWith('--concurrency=')) {
      options.concurrency = parseInt(arg.split('=')[1], 10);
    } else if (arg.startsWith('--auth-token=')) {
      options.authToken = arg.split('=')[1];
    }
  }

  return options;
}

// Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
function showHelp() {
  console.log(`
Manga Crawler CLI

C√°ch s·ª≠ d·ª•ng:
  npx ts-node scripts/crawl.ts [source] [startPage] [endPage] [options]

Tham s·ªë:
  source                     T√™n ngu·ªìn (m·∫∑c ƒë·ªãnh: mangaraw)
  startPage                  Trang b·∫Øt ƒë·∫ßu (m·∫∑c ƒë·ªãnh: 1)
  endPage                    Trang k·∫øt th√∫c (t√πy ch·ªçn)

Options:
  --manga-id=<id>            Crawl m·ªôt manga c·ª• th·ªÉ theo ID
  --use-original-images      S·ª≠ d·ª•ng URL ·∫£nh g·ªëc thay v√¨ t·∫£i v·ªÅ
  --concurrency=<number>     S·ªë l∆∞·ª£ng request ƒë·ªìng th·ªùi (m·∫∑c ƒë·ªãnh: 3)
  --auth-token=<token>       Token x√°c th·ª±c (n·∫øu kh√¥ng c√≥ s·∫Ω d√πng t·ª´ bi·∫øn m√¥i tr∆∞·ªùng)
  --sync                     Ch·∫ø ƒë·ªô sync - c·∫≠p nh·∫≠t chapters (c·∫ßn --manga-id ho·∫∑c sync to√†n b·ªô)
  -h, --help                 Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y

V√≠ d·ª•:
  npx ts-node scripts/crawl.ts mangaraw 1 5 --use-original-images
  npx ts-node scripts/crawl.ts mangaraw --manga-id=20463a51-7faf-4a3f-9e67-5c624f80d487
  npx ts-node scripts/crawl.ts mangaraw --sync --manga-id=20463a51-7faf-4a3f-9e67-5c624f80d487
  npx ts-node scripts/crawl.ts mangaraw --sync

Ngu·ªìn h·ªó tr·ª£:
  ${crawler.getSupportedSources().join(', ')}
  `);
}

// H√†m sync to√†n b·ªô manga ƒë√£ c√≥ trong database
async function syncAllManga(options: any) {
  const { SourceFactory } = require('../src/lib/crawler/sources/factory');

  try {
    // L·∫•y ngu·ªìn t·ª´ factory
    const source = SourceFactory.getSource(options.source || 'mangaraw');

    // C·∫≠p nh·∫≠t token x√°c th·ª±c n·∫øu c√≥
    if (options.authToken && source.getConfig().requiresAuth) {
      source.config.authToken = options.authToken;
    }

    // L·∫•y t·∫•t c·∫£ manga t·ª´ database
    const allManga = await prisma.comics.findMany({
      select: {
        id: true,
        title: true,
        slug: true,
        updated_at: true,
      },
      orderBy: {
        updated_at: 'asc', // Sync manga c≈© nh·∫•t tr∆∞·ªõc
      },
    });

    if (allManga.length === 0) {
      console.log('‚ùå Kh√¥ng c√≥ manga n√†o trong database ƒë·ªÉ sync');
      return;
    }

    console.log(`üìö T√¨m th·∫•y ${allManga.length} manga trong database`);
    console.log('üîÑ B·∫Øt ƒë·∫ßu sync to√†n b·ªô...');

    let totalNew = 0;
    let totalUpdated = 0;
    let totalDeleted = 0;
    let successCount = 0;
    let errorCount = 0;

    for (let i = 0; i < allManga.length; i++) {
      const manga = allManga[i];
      console.log(`\nüìñ [${i + 1}/${allManga.length}] Sync manga: ${manga.title}`);

      try {
        // T·∫°o options cho manga n√†y
        const mangaOptions = {
          ...options,
          mangaId: manga.slug, // S·ª≠ d·ª•ng slug l√†m ID
        };

        // G·ªçi h√†m sync cho manga n√†y
        const result = await syncSingleMangaInternal(mangaOptions, source);

        if (result) {
          totalNew += result.newCount;
          totalUpdated += result.updatedCount;
          totalDeleted += result.deletedCount;
          successCount++;
        }

        // Delay gi·ªØa c√°c manga ƒë·ªÉ tr√°nh rate limiting
        if (i < allManga.length - 1) {
          console.log('‚è≥ Ch·ªù 2 gi√¢y...');
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
      } catch (error) {
        console.error(
          `‚ùå L·ªói sync manga ${manga.title}:`,
          error instanceof Error ? error.message : error
        );
        errorCount++;

        // Ti·∫øp t·ª•c v·ªõi manga ti·∫øp theo
        continue;
      }
    }

    console.log('\nüéâ Sync to√†n b·ªô ho√†n th√†nh!');
    console.log(`üìä T·ªïng k·∫øt:`);
    console.log(`   - Manga th√†nh c√¥ng: ${successCount}/${allManga.length}`);
    console.log(`   - Manga l·ªói: ${errorCount}`);
    console.log(`   - Chapters m·ªõi: ${totalNew}`);
    console.log(`   - Chapters c·∫≠p nh·∫≠t: ${totalUpdated}`);
    console.log(`   - Chapters x√≥a: ${totalDeleted}`);
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh sync to√†n b·ªô:', error);
    throw error;
  }
}

// H√†m sync m·ªôt manga v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
async function syncSingleMangaInternal(options: any, source: any) {
  try {
    // L·∫•y th√¥ng tin manga t·ª´ database
    const existingManga = await prisma.comics.findFirst({
      where: {
        OR: [
          { slug: options.mangaId },
          { id: isNaN(parseInt(options.mangaId)) ? undefined : parseInt(options.mangaId) },
        ],
      },
      include: {
        Chapters: {
          include: {
            Pages: true,
          },
        },
      },
    });

    if (!existingManga) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y manga trong database');
      return null;
    }

    // L·∫•y chapters t·ª´ source
    const chaptersResult = await source.fetchChapters(options.mangaId);
    console.log(`üì• T√¨m th·∫•y ${chaptersResult.chapters.length} chapters t·ª´ source`);

    let updatedCount = 0;
    let newCount = 0;
    let deletedCount = 0;

    // So s√°nh v√† c·∫≠p nh·∫≠t chapters
    for (const sourceChapter of chaptersResult.chapters) {
      const chapterNumber = parseFloat(sourceChapter.number);
      const existingChapter = existingManga.Chapters.find(
        (ch: any) => ch.chapter_number === chapterNumber
      );

      if (existingChapter) {
        // Ki·ªÉm tra xem c√≥ thay ƒë·ªïi kh√¥ng
        const hasChanges =
          existingChapter.title !== sourceChapter.title ||
          existingChapter.Pages.length !== sourceChapter.pages.length;

        if (hasChanges) {
          console.log(`üîÑ C·∫≠p nh·∫≠t chapter ${chapterNumber}: ${sourceChapter.title}`);

          // C·∫≠p nh·∫≠t chapter
          await prisma.chapters.update({
            where: { id: existingChapter.id },
            data: {
              title: sourceChapter.title,
              slug: sourceChapter.slug,
              updated_at: new Date(),
            },
          });

          // C·∫≠p nh·∫≠t pages n·∫øu kh√°c
          if (existingChapter.Pages.length !== sourceChapter.pages.length) {
            await prisma.pages.deleteMany({
              where: { chapter_id: existingChapter.id },
            });

            for (let i = 0; i < sourceChapter.pages.length; i++) {
              await prisma.pages.create({
                data: {
                  chapter_id: existingChapter.id,
                  page_number: i + 1,
                  image_url: options.useOriginalImages
                    ? sourceChapter.pages[i]
                    : sourceChapter.pages[i],
                  created_at: new Date(),
                },
              });
            }
          }

          updatedCount++;
        }
      } else {
        // Chapter m·ªõi
        console.log(`‚ûï Th√™m chapter m·ªõi ${chapterNumber}: ${sourceChapter.title}`);

        const newChapter = await prisma.chapters.create({
          data: {
            comic_id: existingManga.id,
            chapter_number: chapterNumber,
            title: sourceChapter.title,
            slug: sourceChapter.slug,
            release_date: sourceChapter.releasedAt,
            view_count: sourceChapter.views || 0,
            created_at: sourceChapter.releasedAt,
            updated_at: new Date(),
          },
        });

        for (let i = 0; i < sourceChapter.pages.length; i++) {
          await prisma.pages.create({
            data: {
              chapter_id: newChapter.id,
              page_number: i + 1,
              image_url: options.useOriginalImages
                ? sourceChapter.pages[i]
                : sourceChapter.pages[i],
              created_at: new Date(),
            },
          });
        }

        newCount++;
      }
    }

    // Ki·ªÉm tra chapters b·ªã x√≥a
    const sourceChapterNumbers = chaptersResult.chapters.map((ch: any) => parseFloat(ch.number));
    const chaptersToDelete = existingManga.Chapters.filter(
      (ch: any) => !sourceChapterNumbers.includes(ch.chapter_number)
    );

    for (const chapterToDelete of chaptersToDelete) {
      console.log(`üóëÔ∏è X√≥a chapter ${chapterToDelete.chapter_number}: ${chapterToDelete.title}`);
      await prisma.chapters.delete({
        where: { id: chapterToDelete.id },
      });
      deletedCount++;
    }

    // C·∫≠p nh·∫≠t th·ªùi gian sync cho manga
    await prisma.comics.update({
      where: { id: existingManga.id },
      data: {
        updated_at: new Date(),
        last_chapter_uploaded_at: new Date(),
      },
    });

    console.log(
      `‚úÖ Sync ho√†n th√†nh: ${newCount} m·ªõi, ${updatedCount} c·∫≠p nh·∫≠t, ${deletedCount} x√≥a`
    );

    return { newCount, updatedCount, deletedCount };
  } catch (error) {
    console.error('‚ùå L·ªói sync manga:', error);
    throw error;
  }
}

// H√†m sync chapters cho m·ªôt manga c·ª• th·ªÉ ho·∫∑c to√†n b·ªô
async function runSyncMode(options: any) {
  console.log('üîÑ B·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô sync...');

  if (!options.mangaId) {
    console.log('üìö Kh√¥ng c√≥ manga-id, s·∫Ω sync to√†n b·ªô manga ƒë√£ c√≥ trong database...');
    await syncAllManga(options);
    return;
  }

  const { SourceFactory } = require('../src/lib/crawler/sources/factory');

  try {
    // L·∫•y ngu·ªìn t·ª´ factory
    const source = SourceFactory.getSource(options.source || 'mangaraw');

    // C·∫≠p nh·∫≠t token x√°c th·ª±c n·∫øu c√≥
    if (options.authToken && source.getConfig().requiresAuth) {
      source.config.authToken = options.authToken;
    }

    console.log(`üìñ ƒêang sync manga ID: ${options.mangaId}`);

    // S·ª≠ d·ª•ng h√†m sync internal
    const result = await syncSingleMangaInternal(options, source);

    if (!result) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y manga trong database. Ch·∫°y crawl th√¥ng th∆∞·ªùng...');
      await crawler.runCrawler(options);
      return;
    }
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh sync:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// H√†m main
async function main() {
  const options = parseArgs();

  if (options.help) {
    showHelp();
    return;
  }

  console.log('Manga Crawler CLI');
  console.log('=================');
  console.log(`Source: ${options.source}`);

  if (options.mangaId) {
    console.log(`Manga ID: ${options.mangaId}`);
  } else {
    console.log(`Trang: ${options.startPage}${options.endPage ? ` ƒë·∫øn ${options.endPage}` : ''}`);
  }

  console.log(`S·ª≠ d·ª•ng ·∫£nh g·ªëc: ${options.useOriginalImages ? 'C√≥' : 'Kh√¥ng'}`);
  console.log(`Concurrency: ${options.concurrency || 3}`);
  console.log(
    `Auth token: ${options.authToken ? 'ƒê∆∞·ª£c cung c·∫•p' : process.env.MANGARAW_API_TOKEN ? 'T·ª´ bi·∫øn m√¥i tr∆∞·ªùng' : 'Kh√¥ng c√≥'}`
  );
  console.log(`Ch·∫ø ƒë·ªô sync: ${options.sync ? 'C√≥' : 'Kh√¥ng'}`);
  console.log('=================');

  try {
    if (options.sync) {
      await runSyncMode(options);
    } else {
      await crawler.runCrawler(options);
    }
    console.log('Crawler ho√†n th√†nh th√†nh c√¥ng!');
  } catch (error) {
    console.error('Crawler th·∫•t b·∫°i:', error);
    process.exit(1);
  } finally {
    if (!options.sync) {
      await prisma.$disconnect();
    }
  }
}

// Ch·∫°y script
main().catch(error => {
  console.error('L·ªói kh√¥ng mong mu·ªën:', error);
  process.exit(1);
});
