#!/usr/bin/env node
/**
 * Script crawler ƒë·ªÉ ch·∫°y t·ª´ Next.js CLI (CommonJS version)
 *
 * C√°ch s·ª≠ d·ª•ng:
 * node src/scripts/crawler.js [source] [startPage] [endPage] [options]
 */

// Register ts-node to handle TypeScript imports
// eslint-disable-next-line @typescript-eslint/no-require-imports
require('ts-node').register({
  project: './tsconfig.crawler.json',
});

// eslint-disable-next-line @typescript-eslint/no-require-imports
const { runCrawler, getSupportedSources } = require('../lib/crawler');
// eslint-disable-next-line @typescript-eslint/no-require-imports
const dotenv = require('dotenv');

// Load bi·∫øn m√¥i tr∆∞·ªùng
dotenv.config();

/**
 * Parse command line arguments
 */
function parseArguments() {
  const args = process.argv.slice(2);

  if (args.includes('-h') || args.includes('--help')) {
    showHelp();
    process.exit(0);
  }

  const options = {
    source: args[0] || 'mangaraw',
    startPage: args[1] ? parseInt(args[1]) : undefined,
    endPage: args[2] ? parseInt(args[2]) : undefined,
    useOriginalImages: true,
    concurrency: 1, // Gi·∫£m concurrency m·∫∑c ƒë·ªãnh ƒë·ªÉ tr√°nh "too many clients"
    authToken: process.env.MANGARAW_API_TOKEN,
    mangaId: undefined,
    forceUpdateChapters: false,
  };

  // Parse options
  for (let i = 0; i < args.length; i++) {
    const arg = args[i];

    if (arg.startsWith('--manga-id=')) {
      options.mangaId = arg.split('=')[1];
    } else if (arg === '--use-original-images') {
      options.useOriginalImages = true;
    } else if (arg === '--force-update-chapters') {
      options.forceUpdateChapters = true;
    } else if (arg.startsWith('--concurrency=')) {
      const concurrency = parseInt(arg.split('=')[1]) || 1;
      // Gi·ªõi h·∫°n concurrency t·ªëi ƒëa l√† 2 ƒë·ªÉ tr√°nh qu√° t·∫£i database
      options.concurrency = Math.min(concurrency, 2);
      if (concurrency > 2) {
        console.log('‚ö†Ô∏è  Concurrency ƒë∆∞·ª£c gi·ªõi h·∫°n t·ªëi ƒëa l√† 2 ƒë·ªÉ tr√°nh qu√° t·∫£i database');
      }
    } else if (arg.startsWith('--auth-token=')) {
      options.authToken = arg.split('=')[1];
    }
  }

  return options;
}

/**
 * Show help information
 */
function showHelp() {
  console.log(`
Manga Crawler CLI Tool

C√°ch s·ª≠ d·ª•ng:
  node src/scripts/crawler.js [source] [startPage] [endPage] [options]

Tham s·ªë:
  source                         Ngu·ªìn crawler (m·∫∑c ƒë·ªãnh: mangaraw)
  startPage                      Trang b·∫Øt ƒë·∫ßu (m·∫∑c ƒë·ªãnh: 1)
  endPage                        Trang k·∫øt th√∫c (t√πy ch·ªçn)

Options:
  --manga-id=<id>            Crawl m·ªôt manga c·ª• th·ªÉ theo ID
  --use-original-images      S·ª≠ d·ª•ng URL ·∫£nh g·ªëc (lu√¥n b·∫≠t, kh√¥ng download ·∫£nh v·ªÅ server)
  --force-update-chapters    Force update t·∫•t c·∫£ chapters ngay c·∫£ khi content kh√¥ng ƒë·ªïi
  --concurrency=<number>     S·ªë l∆∞·ª£ng request ƒë·ªìng th·ªùi (m·∫∑c ƒë·ªãnh: 1, t·ªëi ƒëa: 2)
  --auth-token=<token>       Token x√°c th·ª±c (n·∫øu kh√¥ng c√≥ s·∫Ω d√πng t·ª´ bi·∫øn m√¥i tr∆∞·ªùng)
  -h, --help                 Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y

V√≠ d·ª•:
  node src/scripts/crawler.js mangaraw 1 5
  node src/scripts/crawler.js mangaraw --manga-id=20463a51-7faf-4a3f-9e67-5c624f80d487
  node src/scripts/crawler.js mangaraw 1 3 --force-update-chapters

T√≠nh nƒÉng m·ªõi:
  - ‚úÖ Auto ki·ªÉm tra c·∫≠p nh·∫≠t ·∫£nh b√¨a manga
  - üåê S·ª≠ d·ª•ng URL g·ªëc thay v√¨ download ·∫£nh v·ªÅ server
  - üîÑ So s√°nh URL ƒë·ªÉ ph√°t hi·ªán ·∫£nh b√¨a m·ªõi
  - üìÑ Smart chapter update: ch·ªâ c·∫≠p nh·∫≠t khi content thay ƒë·ªïi
  - üîÑ Force update option cho chapters khi c·∫ßn
  - üíæ Ti·∫øt ki·ªám dung l∆∞·ª£ng server

L∆∞u √Ω v·ªÅ Database:
  - Crawler ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u ƒë·ªÉ tr√°nh l·ªói "too many database connections"
  - Concurrency m·∫∑c ƒë·ªãnh ƒë∆∞·ª£c gi·∫£m xu·ªëng 1 ƒë·ªÉ ƒë·∫£m b·∫£o ·ªïn ƒë·ªãnh
  - S·ª≠ d·ª•ng connection pooling v√† batch processing
  - Khuy·∫øn ngh·ªã ch·∫°y v·ªõi concurrency=1 cho m√¥i tr∆∞·ªùng production

Ngu·ªìn h·ªó tr·ª£:
  ${getSupportedSources().join(', ')}

Ki·ªÉm tra Database:
  python3 scripts/check-db-connections.py check    # Ki·ªÉm tra connections
  python3 scripts/check-db-connections.py clean    # D·ªçn d·∫πp idle connections
  `);
}

/**
 * Main function
 */
async function main() {
  const options = parseArguments();

  console.log('=================');
  console.log('MANGA CRAWLER CLI');
  console.log('=================');
  console.log(`Ngu·ªìn: ${options.source}`);

  if (options.mangaId) {
    console.log(`Manga ID: ${options.mangaId}`);
  } else {
    console.log(`Trang b·∫Øt ƒë·∫ßu: ${options.startPage || 1}`);
    if (options.endPage) {
      console.log(`Trang k·∫øt th√∫c: ${options.endPage}`);
    }
  }

  console.log(`S·ª≠ d·ª•ng ·∫£nh g·ªëc: ${options.useOriginalImages ? 'C√≥' : 'Kh√¥ng'} (lu√¥n b·∫≠t)`);
  console.log(`Concurrency: ${options.concurrency || 1} (t·ªëi ∆∞u cho database)`);
  console.log(`Force update chapters: ${options.forceUpdateChapters ? 'C√≥' : 'Kh√¥ng'}`);
  console.log(
    `Auth token: ${options.authToken ? 'ƒê∆∞·ª£c cung c·∫•p' : process.env.MANGARAW_API_TOKEN ? 'T·ª´ bi·∫øn m√¥i tr∆∞·ªùng' : 'Kh√¥ng c√≥'}`
  );
  console.log('=================');
  console.log('üîß Database Connection Management: Enabled');
  console.log('üìä Connection Pooling: Active');
  console.log('‚ö° Batch Processing: Optimized');
  console.log('üñºÔ∏è  Cover Image Update Check: Auto Enabled');
  console.log('üåê Image Storage: Original URLs (No Download)');
  console.log('üìÑ Smart Chapter Update: Content Comparison Enabled');
  console.log('=================');

  try {
    await runCrawler(options);
    console.log('‚úÖ Crawler ho√†n th√†nh th√†nh c√¥ng!');
  } catch (error) {
    console.error('‚ùå Crawler th·∫•t b·∫°i:', error);
    
    // Ki·ªÉm tra n·∫øu l√† l·ªói database connection
    if (error.message && error.message.includes('too many clients')) {
      console.error('\nüö® L·ªñI DATABASE CONNECTION:');
      console.error('   - Qu√° nhi·ªÅu k·∫øt n·ªëi database ƒëang m·ªü');
      console.error('   - Khuy·∫øn ngh·ªã: Ch·∫°y script d·ªçn d·∫πp connections');
      console.error('   - Command: python3 scripts/check-db-connections.py clean');
      console.error('   - Ho·∫∑c gi·∫£m concurrency: --concurrency=1');
    }
    
    process.exit(1);
  }
}

// Ch·∫°y script
main().catch(error => {
  console.error('L·ªói kh√¥ng mong mu·ªën:', error);
  process.exit(1);
});
