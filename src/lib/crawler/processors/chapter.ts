/**
 * Processor x·ª≠ l√Ω d·ªØ li·ªáu chapter
 */

import { StandardChapter, ProcessorOptions } from '../types';
import { prisma } from '@/lib/db';
import { withConnection } from '../connection-manager';

/**
 * Processor x·ª≠ l√Ω v√† l∆∞u tr·ªØ d·ªØ li·ªáu chapter
 */
export class ChapterProcessor {
  /**
   * X·ª≠ l√Ω danh s√°ch chapter v√† l∆∞u v√†o database
   * @param chapters Danh s√°ch chapter chu·∫©n h√≥a
   * @param comicId ID c·ªßa manga trong database
   * @param options T√πy ch·ªçn x·ª≠ l√Ω
   */
  async processMany(
    chapters: StandardChapter[],
    comicId: number,
    options: ProcessorOptions = {}
  ): Promise<void> {
    // X·ª≠ l√Ω chapters theo batch ƒë·ªÉ tr√°nh qu√° t·∫£i database
    const batchSize = 3; // Gi·∫£m batch size t·ª´ 5 xu·ªëng 3
    for (let i = 0; i < chapters.length; i += batchSize) {
      const batch = chapters.slice(i, i + batchSize);
      
      // X·ª≠ l√Ω batch tu·∫ßn t·ª± ƒë·ªÉ tr√°nh qu√° t·∫£i database
      for (const chapter of batch) {
        await this.process(chapter, comicId, options);
      }
      
      // Th√™m delay nh·ªè gi·ªØa c√°c batch
      if (i + batchSize < chapters.length) {
        await new Promise(resolve => setTimeout(resolve, 200));
      }
    }

    // C·∫≠p nh·∫≠t th·ªùi gian upload chapter m·ªõi nh·∫•t
    if (chapters.length > 0) {
      await withConnection(async () => {
        return prisma.comics.update({
          where: { id: comicId },
          data: {
            last_chapter_uploaded_at: new Date(),
          },
        });
      });
    }
  }

  /**
   * X·ª≠ l√Ω m·ªôt chapter v√† l∆∞u v√†o database
   * @param chapter Chapter chu·∫©n h√≥a
   * @param comicId ID c·ªßa manga trong database
   * @param options T√πy ch·ªçn x·ª≠ l√Ω
   * @returns ID c·ªßa chapter trong database
   */
  async process(
    chapter: StandardChapter,
    comicId: number,
    options: ProcessorOptions = {}
  ): Promise<number> {
    return withConnection(async () => {
      try {
        // Chuy·ªÉn ƒë·ªïi chapter.number t·ª´ string sang float
        const chapterNumber = parseFloat(chapter.number);

        // Ki·ªÉm tra chapter ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingChapter = await prisma.chapters.findUnique({
          where: {
            comic_id_chapter_number: {
              comic_id: comicId,
              chapter_number: chapterNumber,
            },
          },
          include: {
            Pages: {
              select: { page_number: true, image_url: true },
              orderBy: { page_number: 'asc' }
            }
          }
        });

        // Chu·∫©n b·ªã d·ªØ li·ªáu chapter
        const chapterData = {
          comic_id: comicId,
          chapter_number: chapterNumber,
          title: chapter.title,
          slug: chapter.slug,
          release_date: chapter.releasedAt,
          view_count: chapter.views,
          updated_at: new Date(),
        };

        // Upsert chapter ƒë·ªÉ tr√°nh l·ªói duplicate
        const savedChapter = await prisma.chapters.upsert({
          where: {
            comic_id_chapter_number: {
              comic_id: comicId,
              chapter_number: chapterNumber,
            },
          },
          update: chapterData,
          create: {
            ...chapterData,
            created_at: chapter.releasedAt,
          },
        });

        // Ki·ªÉm tra v√† x·ª≠ l√Ω pages ch·ªâ khi c√≥ thay ƒë·ªïi
        const shouldUpdatePages = await this.shouldUpdatePages(
          existingChapter?.Pages || [], 
          chapter.pages,
          options.forceUpdateChapters || false
        );

        if (shouldUpdatePages) {
          await this.processPages(savedChapter.id, chapter.pages, options);
          console.log(`üìÑ Updated pages for chapter: ${chapter.number} (ID: ${savedChapter.id})`);
        } else {
          console.log(`‚úÖ Pages unchanged for chapter: ${chapter.number} (ID: ${savedChapter.id})`);
        }

        return savedChapter.id;
      } catch (error) {
        console.error(`Error processing chapter ${chapter.number}:`, error);
        throw error;
      }
    });
  }

  /**
   * Ki·ªÉm tra xem c√≥ c·∫ßn c·∫≠p nh·∫≠t pages kh√¥ng
   * @param existingPages Pages hi·ªán t·∫°i trong database
   * @param newPageUrls URLs pages m·ªõi t·ª´ crawler
   * @param forceUpdate true n·∫øu c·∫ßn force update
   * @returns true n·∫øu c·∫ßn c·∫≠p nh·∫≠t
   */
  private async shouldUpdatePages(
    existingPages: Array<{ page_number: number; image_url: string }>,
    newPageUrls: string[],
    forceUpdate: boolean = false
  ): Promise<boolean> {
    try {
      // N·∫øu force update ƒë∆∞·ª£c b·∫≠t
      if (forceUpdate) {
        console.log(`üîÑ Force updating pages (forceUpdateChapters enabled)`);
        return true;
      }

      // N·∫øu s·ªë l∆∞·ª£ng pages kh√°c nhau
      if (existingPages.length !== newPageUrls.length) {
        console.log(`üìä Page count changed: ${existingPages.length} -> ${newPageUrls.length}`);
        return true;
      }

      // N·∫øu ch∆∞a c√≥ pages n√†o
      if (existingPages.length === 0) {
        return true;
      }

      // So s√°nh t·ª´ng page URL
      for (let i = 0; i < newPageUrls.length; i++) {
        const newUrl = newPageUrls[i].trim();
        const existingPage = existingPages.find(p => p.page_number === i + 1);
        
        if (!existingPage || existingPage.image_url !== newUrl) {
          console.log(`üîÑ Page ${i + 1} URL changed:`);
          console.log(`   Old: ${existingPage?.image_url || 'N/A'}`);
          console.log(`   New: ${newUrl}`);
          return true;
        }
      }

      // Kh√¥ng c√≥ thay ƒë·ªïi n√†o
      return false;
    } catch (error) {
      console.error('Error checking page updates:', error);
      // N·∫øu c√≥ l·ªói, coi nh∆∞ c·∫ßn c·∫≠p nh·∫≠t ƒë·ªÉ ƒë·∫£m b·∫£o data integrity
      return true;
    }
  }

  /**
   * X·ª≠ l√Ω v√† l∆∞u pages c·ªßa chapter
   * @param chapterId ID c·ªßa chapter trong database
   * @param pageUrls Danh s√°ch URL c·ªßa pages
   * @param options T√πy ch·ªçn x·ª≠ l√Ω
   */
  private async processPages(
    chapterId: number,
    pageUrls: string[],
    options: ProcessorOptions = {}
  ): Promise<void> {
    // X√≥a pages c≈©
    await prisma.pages.deleteMany({
      where: { chapter_id: chapterId },
    });

    // Th√™m pages m·ªõi theo batch - kh√¥ng download ·∫£nh, ch·ªâ l∆∞u URL g·ªëc
    const batchSize = 10;
    for (let i = 0; i < pageUrls.length; i += batchSize) {
      const batch = pageUrls.slice(i, i + batchSize);
      const pagesData = [];

      for (let j = 0; j < batch.length; j++) {
        const pageUrl = batch[j].trim();
        const pageNumber = i + j + 1;

        // S·ª≠ d·ª•ng URL g·ªëc thay v√¨ download
        pagesData.push({
          chapter_id: chapterId,
          page_number: pageNumber,
          image_url: pageUrl, // S·ª≠ d·ª•ng URL g·ªëc
          created_at: new Date(),
        });
      }

      // L∆∞u batch pages v√†o database
      await prisma.pages.createMany({
        data: pagesData,
      });
    }

    console.log(`üìÑ Processed ${pageUrls.length} pages for chapter ${chapterId} (using original URLs)`);
  }
}
