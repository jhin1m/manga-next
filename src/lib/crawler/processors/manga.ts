/**
 * Processor x·ª≠ l√Ω d·ªØ li·ªáu manga
 */

import { PrismaClient, Prisma } from '@prisma/client';
import { StandardManga, ProcessorOptions } from '../types';
import { prisma } from '@/lib/db';
import { withConnection } from '../connection-manager';

/**
 * Processor x·ª≠ l√Ω v√† l∆∞u tr·ªØ d·ªØ li·ªáu manga
 */
export class MangaProcessor {
  /**
   * X·ª≠ l√Ω manga v√† l∆∞u v√†o database
   * @param manga D·ªØ li·ªáu manga chu·∫©n h√≥a
   * @param options T√πy ch·ªçn x·ª≠ l√Ω
   * @returns ID c·ªßa manga trong database
   */
  async process(manga: StandardManga, options: ProcessorOptions = {}): Promise<number> {
    return withConnection(async () => {
      try {
        // Ki·ªÉm tra manga ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingManga = await prisma.comics.findUnique({
          where: { slug: manga.slug },
          select: { id: true, cover_image_url: true }
        });

        // Ki·ªÉm tra v√† x·ª≠ l√Ω cover image (lu√¥n ki·ªÉm tra c·∫≠p nh·∫≠t)
        const coverImageUrl = await this.checkAndUpdateCoverImage(
          manga.coverUrl, 
          manga.slug, 
          existingManga?.cover_image_url
        );

        // Chu·∫©n b·ªã d·ªØ li·ªáu manga
        const comicData = {
          title: manga.title,
          slug: manga.slug,
          alternative_titles: manga.alternativeTitles || {},
          description: manga.description,
          cover_image_url: coverImageUrl,
          status: manga.status,
          total_views: manga.views,
          updated_at: new Date(),
        };

        // S·ª≠ d·ª•ng transaction v·ªõi timeout tƒÉng l√™n 30 gi√¢y
        const comic = await prisma.$transaction(
          async tx => {
            // Upsert manga
            const comic = await tx.comics.upsert({
              where: { slug: manga.slug },
              update: comicData,
              create: {
                ...comicData,
                created_at: manga.createdAt,
              },
            });

            // X·ª≠ l√Ω genres n·∫øu c√≥ - truy·ªÅn transaction client
            if (manga.genres && manga.genres.length > 0) {
              await this.processGenres(tx, comic.id, manga.genres);
            }

            return comic;
          },
          {
            maxWait: 30000, // TƒÉng th·ªùi gian ch·ªù t·ªëi ƒëa l√™n 30 gi√¢y
            timeout: 30000, // TƒÉng th·ªùi gian timeout l√™n 30 gi√¢y
          }
        );

        console.log(`Successfully processed manga: ${manga.title} (ID: ${comic.id})`);
        return comic.id;
      } catch (error) {
        console.error(`Error processing manga ${manga.title}:`, error);

        // Log additional details for debugging
        if (error instanceof Error) {
          console.error(`Error name: ${error.name}`);
          console.error(`Error message: ${error.message}`);
          if (error.message.includes('P2003')) {
            console.error(
              'Foreign key constraint violation detected. This may be due to transaction scope issues.'
            );
          }
        }

        throw error;
      }
    });
  }

  /**
   * Ki·ªÉm tra v√† c·∫≠p nh·∫≠t cover image (kh√¥ng download, ch·ªâ so s√°nh URL)
   * @param newUrl URL c·ªßa cover image m·ªõi
   * @param slug Slug c·ªßa manga
   * @param existingUrl URL cover image hi·ªán t·∫°i (n·∫øu c√≥)
   * @returns URL c·ªßa cover image (s·ª≠ d·ª•ng URL g·ªëc)
   */
  private async checkAndUpdateCoverImage(
    newUrl: string,
    slug: string,
    existingUrl: string | null | undefined
  ): Promise<string> {
    try {
      // N·∫øu ch∆∞a c√≥ ·∫£nh b√¨a c≈©
      if (!existingUrl) {
        console.log(`üÜï New cover image for ${slug}: ${newUrl}`);
        return newUrl;
      }

      // So s√°nh URL ƒë·ªÉ ki·ªÉm tra thay ƒë·ªïi
      if (existingUrl !== newUrl) {
        console.log(`üîÑ Cover image updated for ${slug}:`);
        console.log(`   Old: ${existingUrl}`);
        console.log(`   New: ${newUrl}`);
        return newUrl;
      } else {
        console.log(`‚úÖ Cover image unchanged for ${slug}`);
        return existingUrl;
      }

    } catch (error) {
      console.error(`Error checking cover image for ${slug}:`, error);
      return newUrl; // N·∫øu c√≥ l·ªói, tr·∫£ v·ªÅ URL m·ªõi
    }
  }

  /**
   * X·ª≠ l√Ω v√† l∆∞u th·ªÉ lo·∫°i
   * @param tx Transaction client t·ª´ Prisma
   * @param comicId ID c·ªßa manga trong database
   * @param genres Danh s√°ch th·ªÉ lo·∫°i
   */
  private async processGenres(
    tx: Prisma.TransactionClient,
    comicId: number,
    genres: { sourceId: number | string; name: string; slug: string }[]
  ): Promise<void> {
    try {
      // Validate input parameters
      if (!comicId || !genres || !Array.isArray(genres)) {
        console.warn('Invalid parameters for processGenres:', { comicId, genres });
        return;
      }

      // X√≥a genres c≈©
      await tx.comic_Genres.deleteMany({
        where: { comic_id: comicId },
      });

      // Th√™m genres m·ªõi
      for (const genre of genres) {
        // Validate genre data
        if (!genre.name || !genre.slug) {
          console.warn('Invalid genre data:', genre);
          continue;
        }

        // Upsert genre ƒë·ªÉ tr√°nh duplicate
        const savedGenre = await tx.genres.upsert({
          where: { slug: genre.slug },
          update: { name: genre.name },
          create: {
            name: genre.name,
            slug: genre.slug,
            created_at: new Date(),
          },
        });

        // Li√™n k·∫øt comic v·ªõi genre
        await tx.comic_Genres.create({
          data: {
            comic_id: comicId,
            genre_id: savedGenre.id,
          },
        });
      }
    } catch (error) {
      console.error(`Error processing genres for comic ${comicId}:`, error);
      throw error;
    }
  }
}
